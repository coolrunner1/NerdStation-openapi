openapi: 3.1.0
info:
  title: Reddit-like Web Application API
  description: API for a web application similar to Reddit, allowing users to post content, comment, and interact with each other.
  version: 1.0.0
servers:
  - url: http://localhost:8085

paths:
  /api/v1/login:
    post:
      summary: Login
      tags:
        - auth
      requestBody:
        required: true
        content:
          application/json:
              schema:
                type: object
                properties:
                    username:
                        type: string
                        description: The username of the user.
                    password:
                        type: string
                        description: The password of the user.
      responses:
        '201':
          description: Logged in successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /api/v1/register:
    post:
      summary: Register
      tags:
        - auth
      requestBody:
        required: true
        content:
          application/json:
              schema:
                type: object
                properties:
                    username:
                        type: string
                        description: The username of the user.
                    password:
                        type: string
                        description: The password of the user.
                    confirmedPassword:
                        type: string
                        description: The password of the user.
      responses:
        '201':
          description: Logged in successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /api/v1/users:
    get:
      summary: Get all users
      tags:
        - users
      parameters:
        - name: start
          in: query
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            default: 15
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    #post:
      #summary: Create a new user
      #tags:
        #- users
      #requestBody:
        #required: true
        #content:
          #application/json:
            #schema:
              #$ref: '#/components/schemas/User'
      #responses:
        #'201':
          #description: User created successfully
          #content:
            #application/json:
              #schema:
                #$ref: '#/components/schemas/User'

  /api/v1/users/{userId}:
    get:
      summary: Get user by ID
      tags:
        - users
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    put:
      summary: Update user
      tags:
        - users
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    patch:
      summary: Update user's password
      tags:
        - users
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              password: string
      responses:
        '200':
          description: Password updated successfully
    delete:
      summary: Delete a user
      tags:
        - users
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: User deleted successfully
          
  /api/v1/users/{userId}/comments:
    get:
      summary: Get comments made by specified user
      tags:
        - comments
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
        - name: start
          in: query
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            default: 15
      responses:
        '200':
          description: List of comments
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
          
  /api/v1/communities:
    get:
      summary: Get all communities
      tags:
        - communities
      parameters:
        - name: start
          in: query
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            default: 15
      responses:
        '200':
          description: A list of communities
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Community'
    post:
      summary: Create a new community
      tags:
        - communities
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Community'
      responses:
        '201':
          description: Community created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Community'
  
  /api/v1/communities/{communityId}:
    get:
      summary: Get community by ID
      tags:
        - communities
      parameters:
        - name: communityId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Community
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Community'
    put:
      summary: Update an existing community
      tags:
        - communities
      parameters:
        - name: communityId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Community'
      responses:
        '200':
          description: Community updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Community'
    delete:
      summary: Delete a community
      tags:
        - communities
      parameters:
        - name: communityId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Community deleted successfully
                
  /api/v1/posts:
    get:
      summary: Get all posts
      tags:
        - posts
      parameters:
        - name: start
          in: query
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            default: 15
      responses:
        '200':
          description: Post details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
    post:
      summary: Create a new post
      tags:
        - posts
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
      responses:
        '201':
          description: Post created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
  
  /api/v1/posts/{postId}:
    get:
      summary: Get post by ID
      tags:
        - posts
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Post details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
                
    put:
      summary: Update an existing post
      tags:
        - posts
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
      responses:
        '200':
          description: Post updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
    delete:
      summary: Delete a post
      tags:
        - posts
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Post deleted successfully
  
  /api/v1/posts/{postId}/comments:
    get:
      summary: Get comments for a post
      tags:
        - comments
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: integer
        - name: start
          in: query
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            default: 15
      responses:
        '200':
          description: List of comments for the post
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
    post:
      summary: Create a comment
      tags:
        - comments
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
      responses:
        '201':
          description: Comment created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'

  /api/v1/community/{communityId}/posts:
    get:
      summary: Get all posts in a community
      tags:
        - posts
      parameters:
        - name: communityId
          in: path
          required: true
          schema:
            type: integer
        - name: start
          in: query
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            default: 15
      responses:
        '200':
          description: A list of posts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'

  /api/v1/users/{userId}/posts:
    get:
      summary: Get posts made by specified user
      tags:
        - posts
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
        - name: start
          in: query
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            default: 15
      responses:
        '200':
          description: A list of posts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
                
  /api/v1/comments/{commentId}:
    get:
      summary: Get a comment by id
      tags:
        - comments
      parameters:
        - name: commentId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Comment with an id
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Comment'
    put:
      summary: Update a comment
      tags:
        - comments
      parameters:
        - name: commentId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
      responses:
        '200':
          description: Comment updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
    delete:
      summary: Delete a comment
      tags:
        - comments
      parameters:
        - name: commentId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Comment deleted successfully

  /api/v1/users/{userId}/communities:
    get:
      summary: Get communities that the user is subscribed to
      tags:
        - communities
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
        - name: start
          in: query
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            default: 15
      responses:
        '200':
          description: List of user's subscriptions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Community'

  /api/v1/users/{userId}/communities/{communityId}:
    post:
      summary: Subscribe to the community
      tags:
        - communities
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
        - name: communityId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '201':
          description: Subscribed to the community successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Community'
    delete:
      summary: Unsubscribe from the community
      tags:
        - communities
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
        - name: communityId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Unsubscribed from the community successfully


  /api/v1/communities/{communityId}/users:
    get:
      summary: Get community subscribers
      tags:
        - communities
      parameters:
        - name: communityId
          in: path
          required: true
          schema:
            type: integer
        - name: start
          in: query
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            default: 15
      responses:
        '200':
          description: List of community's subscribers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /api/v1/categories:
    get:
      summary: Get all categories
      tags:
        - categories
      responses:
        '200':
          description: List of categories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
    post:
      summary: Create a new category
      tags:
        - categories
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
      responses:
        '201':
          description: Category created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'


  /api/v1/categories/{categoryId}:
    get:
      summary: Get category
      tags:
        - categories
      parameters:
        - name: categoryId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Category
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
    put:
      summary: Update category
      tags:
        - categories
      parameters:
        - name: categoryId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
      responses:
        '200':
          description: Category updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
    delete:
      summary: Delete a category
      tags:
        - categories
      parameters:
        - name: categoryId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Category deleted successfully

  /api/v1/search/posts:
    get:
      summary: Search posts
      tags:
        - search
      parameters:
        - name: search
          in: query
          required: true
          schema:
            type: string
        - name: start
          in: query
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            default: 15
        - name: categoryOneOf
          in: query
          schema:
            type: integer
        - name: categoryAllOf
          in: query
          schema:
            type: array
            items: integer
        - name: tagsOneOf
          in: query
          schema:
            type: string
        - name: tagsAllOf
          in: query
          schema:
            type: array
            items: string
        - name: sort
          in: query
          schema:
            type: string
            enum: ["name", "createdAt", "views", "likes", "-name", "-createdAt", "-views", "-likes"]
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'

  /api/v1/search/users:
    get:
      summary: Search users
      tags:
        - search
      parameters:
        - name: search
          in: query
          required: true
          schema:
            type: string
        - name: start
          in: query
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            default: 15
        - name: sort
          in: query
          schema:
            type: string
            enum: ["name", "createdAt", "numberOfPosts", "numberOfComments",  "-name", "-createdAt", "-numberOfPosts", "-numberOfComments"]
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'

  /api/v1/search/communities:
    get:
      summary: Search communities
      tags:
        - search
      parameters:
        - name: search
          in: query
          required: true
          schema:
            type: string
        - name: start
          in: query
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            default: 15
        - name: categoryOneOf
          in: query
          schema:
            type: integer
        - name: categoryAllOf
          in: query
          schema:
            type: array
            items: integer
        - name: tagsOneOf
          in: query
          schema:
            type: string
        - name: tagsAllOf
          in: query
          schema:
            type: array
            items: string
        - name: sort
          in: query
          schema:
            type: string
            enum: ["name", "createdAt", "numberOfPosts", "numberOfMembers",  "-name", "-createdAt", "-numberOfPosts", "-numberOfMembers"]
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Community'

components:
  schemas:
    Post:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          example: "My First Post"
        content:
          type: string
          example: "This is the content of my first post."
        authorId:
          type: string
          readOnly: true
        communityId:
          type: integer
        images:
          $ref: '#/components/schemas/Image'
          type: ['null', array]
        categories:
          $ref: '#/components/schemas/Category'
          type: array
        tags:
          type: array
        views:
          type: integer
        likes:
          type: integer
        dislikes:
          type: integer
        createdAt:
          type: string
          format: date-time
          readOnly: true

    Comment:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        content:
          type: string
        authorId:
          type: integer
          readOnly: true
        postId:
            type: integer
            readOnly: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
        author:
          $ref: '#/components/schemas/User'
          type: object
    
    User:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        username:
          type: string
        password:
          type: string
          writeOnly: true
        description:
          type: ['null', string]
        avatarPath:
          type: ['null', string]
        banner:
          $ref: '#/components/schemas/Image'
          type: ['null', object]
        numberOfPosts:
          readOnly: true
          type: integer
        numberOfComments:
          readOnly: true
          type: integer
        createdAt:
          type: string
          format: date-time
          readOnly: true

    UserCommunity:
        type: object
        properties:
          id:
            type: integer
            readonly: true
          userId:
            type: integer
          communityId:
            type: integer

    Community:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
        description:
          type: string
        numberOfMembers:
          readOnly: true
          type: integer
        numberOfPosts:
          readOnly: true
          type: integer
        avatarPath:
          type: ['null', string]
        banner:
          $ref: '#/components/schemas/Image'
          type: ['null', object]
        owner:
          $ref: '#/components/schemas/User'
          type: object
        moderators:
          $ref: '#/components/schemas/User'
          type: ['null', array]
        tags:
          type: array
          items:
            type: string
        categories:
          type: array
          items:
             $ref: '#/components/schemas/Category'
        createdAt:
          type: string
          format: date-time
          readOnly: true

    Image:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
        alt:
          type: string
        description:
          type: ['null', string]
        imagePath:
          type: string
        createdAt:
          type: string
          format: date-time
          readOnly: true

    Category:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string